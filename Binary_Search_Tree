#pragma once
#include <stdio.h>
#include <stdbool.h>
#include "binarySearchTreeADT.h"

BST_TREE* bstCreate()
{
	BST_TREE* tree = (BST_TREE*)malloc(sizeof(BST_TREE));
	if (tree)
	{
		tree->root = NULL;
		tree->count = 0;
	}

	return tree;
}

void bstDestroy(BST_TREE* tree)
{
	if (tree)
	{
		_bstDestroy(tree->root);
		tree->count = 0;

		free(tree);
	}
}

void _bstDestroy(TREE_NODE* root)
{
	if (root)
	{
		_bstDestroy(root->left);
		_bstDestroy(root->right);
		free(root);
	}
}


bool bstInsert(BST_TREE* tree, int data)
{
	TREE_NODE *pNode = NULL;

	pNode = (TREE_NODE*)malloc(sizeof(TREE_NODE));
	if (!pNode)
	{
		return false;
	}
	
	pNode->left = NULL;
	pNode->right = NULL;
	pNode->data = data;

	if (tree->count == 0)
	{
		tree->root = pNode;
	}
	else
		_insert(tree->root, pNode);

	(tree->count)++;
	return true;
}

TREE_NODE* _insert(TREE_NODE* root, TREE_NODE* newNode)
{
	if (root == NULL)
	{
		return newNode;
	}

	if (newNode->data < root->data)
	{
		root->left = _insert(root->left, newNode);
	}
	else
		root->right = _insert(root->right, newNode);

	return root;
}

bool bstDelete(BST_TREE* tree, int key)
{
	TREE_NODE *pNode = (TREE_NODE*)malloc(sizeof(TREE_NODE));
	pNode = NULL;

	if (tree->count == 0)
	{
		return true;
	}
	
	_delete(pNode, key);


}

TREE_NODE* _delete(TREE_NODE *root, int key)
{
	if (root->data == key)
	{
		root = 
	}
}

TREE_NODE* bstSearch(BST_TREE* tree, int key)
{

}

bool bstEmpty(BST_TREE* tree)
{

}

int bstCount(BST_TREE* tree)
{

}
